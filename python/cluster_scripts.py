import subprocess
import getpass
import os

def generate_qsub_file(bmk_str, cmd_str, sfile, output_dir, linux, fpga_bitstream, sim_flags):
    with open(sfile, 'w') as f:
        # I can't get this to work with sh for some reason
        f.write("#!/bin/bash\n")
        f.write("### This file was auto-generated by spawn.py\n")
        f.write("### Set the job name\n")
        f.write("#SBATCH -J " + bmk_str + "\n\n")
        # f.write("### Declare myprogram non-rerunable\n")
        # f.write("#SBATCH -r n \n\n")
        f.write("### Email User\n")
        f.write("#SBATCH --uid=" + getpass.getuser() + "\n")
        if (EMAIL_ENABLED):
            f.write("#SBATCH --mail-type=END\n")
            f.write("#SBATCH --mail-user=" + getpass.getuser() + "@eecs.berkeley.edu\n\n")
        else:
            f.write("### #SBATCH --mail-type=NONE\n\n")
         
        f.write("### Assign one FPGA\n\n")
        f.write("#SBATCH -p fpga\n\n")
        f.write("#SBATCH --gres=fpga:1\n\n")
        
#        f.write("### -l walltime=HH:MM:SS and -l cput=HH:MM:SS\n")
        f.write("### Jobs on the public clusters are currently limited to 10 days walltime.\n")
        f.write("#SBATCH --time=120:00:00\n")

        f.write("### Supress messages\n")
        f.write("#SBATCH -Q\n")
        print "Current directory(",os.getcwd(),")"
        f.write("SLURMDIR=" + output_dir + "/\n")
        #f.write("JOBID=`echo $PBS_JOBID | sed -e 's/\..*//'`\n")
        f.write("mkdir -p $SLURMDIR\n")
        f.write("exec > $SLURMDIR/" + bmk_str + ".out 2> $SLURMDIR/" + bmk_str +".err\n\n")

        ### Jobs should only be run from /scratch, /nscratch or /vlsi; Torque returns results via NFS.
        #f.write("echo Working directory is $PBS_O_WORKDIR\n")
        #f.write("echo with jobid: $JOBID\n")
        #f.write("cd $PBS_O_WORKDIR\n")
        f.write("cd " + BUILD_DIR + "\n")
         
        ### Run some informational commands.
        f.write("echo Running on host `hostname`\n")
        f.write("echo Time is `date`\n")
        f.write("echo Directory is `pwd`\n")
         
#        f.write("### the command we care about:\n")
#        f.write("echo ['" + cmd_str.replace('\n','') + "']\n")
#        f.write("time spike -g +disk=" + root_bin + " bbl vmlinux")
          
        ### FPGA stuff
        f.write("### FPGA Stuff\n")
        f.write("source /nscratch/fpga-cluster/fpga-scripts/aspire-fpga-cluster-select.sh\n")
        f.write("sleep 1\n")
        f.write("echo \"FPGA ID:\"\n")
        f.write("echo $FPGA_ID\n")
        f.write("echo \"FPGA IP:\"\n")
        f.write("echo $FPGA_IP\n")
        f.write("### Load the fpga bitfile\n")
        f.write("source /ecad/tools/xilinx/Vivado/2016.2/settings64.sh\n")
        f.write("which vivado\n")
        # Reset the FPGA, in case it is in an unusable state
        f.write("### Reset the FPGA in case it hung in an earlier run\n")
        f.write("count=0\n")
        f.write("/opt/apc-8/snmp-apc-set.sh $FPGA_ID 3\n")
        f.write("while true; do\n")
        f.write("    count=$[$count + 1]\n")
        f.write("    if ping -c 1 $FPGA_IP &> /dev/null\n")
        f.write("    then\n")
        f.write("        break\n")
        f.write("    fi\n")
        f.write("    if [ $count -gt 30 ]\n")
        f.write("    then\n")
        f.write("        echo FPGA did not come out of reset.\n")
        f.write("        exit 255\n")
        f.write("    fi\n")
        f.write("done\n\n")

        # Execute FPGA programming as a critical section
        f.write("### Program the FPGA\n")
        f.write("(\n")
        f.write("  flock -e 200\n")
        f.write("  /nscratch/fpga-cluster/fpga-scripts/load-bitstream.sh " + fpga_bitstream + "\n")
        f.write("  sleep 1\n")
        f.write(") 200>/var/lock/.load-bitstream.sh.lock\n")
        
        f.write("### Copy the MIDAS driver\n")
        key = os.path.join("~", ".ssh", "id_rsa")
        f.write("scp -i %s %s root@$FPGA_IP:/sdcard/midas/MidasTop-zynq\n" % (
                key, os.path.join(BASE_DIR, "MidasTop-zynq")))
        f.write("scp -i %s %s root@$FPGA_IP:/usr/local/lib/libfesvr.so\n" % (
                key, os.path.join(BASE_DIR, "libfesvr.so")))

        f.write("### Send over the image we want to the FPGA\n")
        f.write("scp -i " + key + " " + linux + " root@$FPGA_IP:/sdcard/midas/linux\n")
        f.write("sleep 2\n")

        f.write("### Log-in to the FPGA and run the benchmark\n")
        f.write("echo ['" + cmd_str.replace('\n','') + "']\n")
        f.write("time ssh root@$FPGA_IP -i " + key + 
          " -t \"ls; sync; uname -a; ls /sdcard/midas; cd /sdcard/midas; ./MidasTop-zynq " +
          ' '.join(sim_flags.split()) + " ./linux\"\n")

